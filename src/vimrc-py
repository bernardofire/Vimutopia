" Auto-indentation
set autoindent

" Moving indentation
set smartindent cinwords=if,elif,else,for,while,try,except,finaly,def,class

" Set tab stop to 4
set tabstop=4

" Use < and > with 4 spaces
set shiftwidth=4

" Transform tabs in blankspaces
set expandtab

" Convert existent tabs
retab

python << EOF
import rlcompleter
import vim
import re

def get_index_of_equals(text1, text2):
    for index, letter1 in enumerate(text1):
        if text2[index] != letter1:
            return index
    return min(len(text1), len(text2))

def get_completation(completer, text):
    if text:
        text_completed = ""
        state = 0
        completed = ""
        while completed != None:
            completed = completer.complete(text, state)
            state += 1
            if text_completed:
                if completed:
                    index = get_index_of_equals(text_completed, completed)
                    text_completed = completed[:index]
            else:
                text_completed = completed
        return text_completed

def get_used_text(text):
    match = re.search("^(?P<unused> *)(?P<used>.*)$", text)
    unused = match.groupdict()["unused"]
    used = match.groupdict()["used"]
    return unused + "%s", used

def auto_complete():
    completer = rlcompleter.Completer()
    line, row = vim.current.window.cursor
    text = vim.current.buffer[line - 1]
    unused_text, used_text = get_used_text(text)
    text = get_completation(completer, used_text)
    if used_text:
        if text:
            vim.current.buffer[line - 1] = unused_text % text
            vim.current.window.cursor = (line, len(unused_text % text))
    else:
        vim.current.buffer[line - 1] = "    " + unused_text % used_text
        vim.current.window.cursor = (line, row + 4)
EOF

" Aliases
imap <TAB> <ESC>:python auto_complete()<CR>a

imap <F5> <ESC>:w<CR>:! specloud; echo -n "Press enter to continue..."; read<CR>a

nmap <F5> :w<CR>:! specloud<CR>
